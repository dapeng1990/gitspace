常用git命令

1、git init              将当期目录变为git可以管理测仓库

2、git add               将文件添加到仓库

3、git commit            将文件提交到仓库
	git commit -m "提交说明"
	
4、git status             查看当前仓库状态 	
	
5、git diff 文件名         查看修改

6、git log                  查看从最近到最远的提交日志
	git log --pretty=oneline      如果提交记录过多，可以使用改命令
	
7、Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

8、git reset --hard HEAD^                 把当前版本append GPL回退到上一个版本
   git reset --hard commit_id             hard commit_id是版本号，一串字符那个	回退到指定版本（建议使用改命令）   
   版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个（不过还是习惯写全）
   
9、git reflog                      记录每一次命令   


10、当前能看到德那个目录是一个工作区，工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库
	Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD
	
	前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：
    第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
	第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。

	因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。
	你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
	Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件
	
11、git diff HEAD -- readme.txt                 查看工作区和版本库里面最新版本的区别（即git add 后的文件和版本库中的区别）

12、git checkout -- readme.txt                   readme.txt文件在工作区的修改全部撤销
	这里有两种情况：
	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
	总之，就是让这个文件回到最近一次git commit或git add时的状态。
	
13、git reset HEAD readme.txt                   暂存区的修改撤销掉（unstage），重新放回工作区
	git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本
	
	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。